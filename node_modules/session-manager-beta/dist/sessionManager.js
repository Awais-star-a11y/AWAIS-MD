'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var CryptoJS = require('crypto-js');
var reactCookie = require('react-cookie');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var CryptoJS__default = /*#__PURE__*/_interopDefaultLegacy(CryptoJS);

function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}

var cookies = new reactCookie.Cookies();
var secretKey = 'SHIVAMSHARMA8081';
var encryptData = function encryptData(data) {
  try {
    var dataString = _typeof(data) === 'object' ? JSON.stringify(data) : data;
    var encrypted = CryptoJS__default["default"].AES.encrypt(dataString, secretKey).toString();
    return encrypted;
  } catch (error) {
    console.error('Error encrypting data:', error);
    return null;
  }
};
var decryptData = function decryptData(encryptedData) {
  try {
    var bytes = CryptoJS__default["default"].AES.decrypt(encryptedData, secretKey);
    var decryptedData = bytes.toString(CryptoJS__default["default"].enc.Utf8);
    if (!decryptedData) {
      throw new Error('Decryption failed or data is empty');
    }
    try {
      return JSON.parse(decryptedData);
    } catch (jsonError) {
      return decryptedData;
    }
  } catch (error) {
    console.error('Error decrypting data:', error);
    return null;
  }
};
var SetSession = function SetSession(type, key, value) {
  var tempKey = key.toLowerCase();
  var encryptedValue = encryptData(value);
  if (type.toLowerCase() === 'localstorage') {
    window.localStorage.setItem(tempKey, encryptedValue);
  } else if (type.toLowerCase() === 'cookies') {
    cookies.set(tempKey, encryptedValue, {
      path: '/',
      expires: new Date(new Date().getTime() + 60 * 60 * 1000)
    });
  } else if (type.toLowerCase() === 'sessionstorage') {
    sessionStorage.setItem(tempKey, encryptedValue);
  }
};
var GetSession = function GetSession(type, key) {
  var tempKey = key.toLowerCase();
  var data;
  if (type.toLowerCase() === 'localstorage') {
    data = window.localStorage.getItem(tempKey);
  } else if (type.toLowerCase() === 'cookies') {
    data = cookies.get(tempKey);
  } else if (type.toLowerCase() === 'sessionstorage') {
    data = sessionStorage.getItem(tempKey);
  }
  return data ? decryptData(data) : null;
};
var RemoveSession = function RemoveSession(type, key) {
  var tempKey = key.toLowerCase();
  if (type.toLowerCase() === 'localstorage') {
    localStorage.removeItem(tempKey);
  } else if (type.toLowerCase() === 'cookies') {
    cookies.remove(tempKey);
  } else if (type.toLowerCase() === 'sessionstorage') {
    sessionStorage.removeItem(tempKey);
  }
};

exports.GetSession = GetSession;
exports.RemoveSession = RemoveSession;
exports.SetSession = SetSession;
exports.decryptData = decryptData;
exports.encryptData = encryptData;
